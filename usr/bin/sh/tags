CHECKEND	parser.c	/^#define CHECKEND()	{goto checkend; checkend_return/
Mecho	bltin/echo.c	/^main(argc, argv)$/
Mmain	main.c	/^main(argc, argv)$/
PARSEARITH	parser.c	/^#define	PARSEARITH()	{goto parsearith; parsearith_/
PARSEBACKQNEW	parser.c	/^#define PARSEBACKQNEW()	{oldstyle = 0; goto parseb/
PARSEBACKQOLD	parser.c	/^#define PARSEBACKQOLD()	{oldstyle = 1; goto parseb/
PARSEREDIR	parser.c	/^#define PARSEREDIR()	{goto parseredir; parseredir_/
PARSESUB	parser.c	/^#define PARSESUB()	{goto parsesub; parsesub_return/
RETURN	parser.c	/^#define RETURN(token)	return lasttoken = token$/
STRTODEST	expand.c	/^#define STRTODEST(p) \\$/
addcmdentry	exec.c	/^addcmdentry(name, entry)$/
addfname	expand.c	/^addfname(name)$/
aliascmd	alias.c	/^aliascmd(argc, argv)$/
andor	parser.c	/^andor() {$/
argstr	expand.c	/^argstr(p, flag)$/
bgcmd	jobs.c	/^bgcmd(argc, argv)$/
bltincmd	eval.c	/^bltincmd(argc, argv)$/
bltinlookup	var.c	/^bltinlookup(name, doall)$/
breakcmd	eval.c	/^breakcmd(argc, argv)$/
calcsize	nodes.c	/^calcsize(n)$/
casematch	expand.c	/^casematch(pattern, val)$/
cdcmd	cd.c	/^cdcmd(argc, argv)$/
changepath	exec.c	/^changepath(newval)$/
chkmail	mail.c	/^chkmail(silent)$/
ckmalloc	memalloc.c	/^ckmalloc(nbytes) $/
ckrealloc	memalloc.c	/^ckrealloc(p, nbytes)$/
clear_traps	trap.c	/^clear_traps() {$/
clearcmdentry	exec.c	/^clearcmdentry(firstchange)$/
clearredir	redir.c	/^clearredir() {$/
closescript	input.c	/^closescript() {$/
cmdlookup	exec.c	/^cmdlookup(name, add)$/
cmdloop	main.c	/^cmdloop(top) $/
cmdputs	jobs.c	/^cmdputs(s)$/
cmdtxt	jobs.c	/^cmdtxt(n)$/
command	parser.c	/^command() {$/
commandtext	jobs.c	/^commandtext(n)$/
copyfd	redir.c	/^copyfd(from, to) $/
copyfunc	nodes.c	/^copyfunc(n)$/
copynode	nodes.c	/^copynode(n)$/
copynodelist	nodes.c	/^copynodelist(lp)$/
cvtnum	expand.c	/^cvtnum(num, buf)$/
defun	exec.c	/^defun(name, func)$/
delete_cmd_entry	exec.c	/^delete_cmd_entry() {$/
deletefuncs	exec.c	/^deletefuncs() {$/
docd	cd.c	/^docd(dest, print)$/
doformat	output.c	/^doformat(dest, f, ap)$/
dotcmd	main.c	/^dotcmd(argc, argv)  $/
dotrap	trap.c	/^dotrap() {$/
dowait	jobs.c	/^dowait(block, job)$/
dprintf	output.c	/^dprintf(char *fmt, ...) {$/
emptyoutbuf	output.c	/^emptyoutbuf(dest)$/
environment	var.c	/^environment() {$/
errmsg	error.c	/^errmsg(e, action) $/
error	error.c	/^error(va_alist)$/
error2	error.c	/^error2(a, b)$/
evalbackcmd	eval.c	/^evalbackcmd(n, result)$/
evalcase	eval.c	/^evalcase(n, flags)$/
evalcmd	eval.c	/^evalcmd(argc, argv)  $/
evalcommand	eval.c	/^evalcommand(cmd, flags, backcmd)$/
evalfor	eval.c	/^evalfor(n)$/
evalloop	eval.c	/^evalloop(n)$/
evalpipe	eval.c	/^evalpipe(n)$/
evalstring	eval.c	/^evalstring(s)$/
evalsubshell	eval.c	/^evalsubshell(n, flags)$/
evaltree	eval.c	/^evaltree(n, flags)$/
evalvar	expand.c	/^evalvar(p, flag)$/
execcmd	eval.c	/^execcmd(argc, argv) $/
execinterp	exec.c	/^execinterp(argv, envp)$/
exit	main.c	/^exit(exitstatus) {$/
exitcmd	main.c	/^exitcmd(argc, argv)  $/
exitshell	trap.c	/^exitshell(status) $/
expandarg	expand.c	/^expandarg(arg, arglist, flag)$/
expandhere	expand.c	/^expandhere(arg, fd)$/
expandmeta	expand.c	/^expandmeta(str, flag)$/
expari	expand.c	/^expari(flag)$/
expbackq	expand.c	/^expbackq(cmd, quoted, flag)$/
expmeta	expand.c	/^expmeta(enddir, name)$/
exportcmd	var.c	/^exportcmd(argc, argv)$/
expredir	eval.c	/^expredir(n)$/
expsort	expand.c	/^expsort(str)$/
exptilde	expand.c	/^exptilde(p, flag)$/
exraise	error.c	/^exraise(e) $/
falsecmd	eval.c	/^falsecmd(argc, argv) $/
fc_replace	histedit.c	/^fc_replace(s, p, r)$/
fd0_redirected_p	redir.c	/^fd0_redirected_p () {$/
fgcmd	jobs.c	/^fgcmd(argc, argv)$/
find_builtin	exec.c	/^find_builtin(name)$/
find_command	exec.c	/^find_command(name, entry, printerr)$/
find_dot_file	main.c	/^find_dot_file(basename)$/
fixredir	parser.c	/^void fixredir(n, text, err)$/
flushall	output.c	/^flushall() {$/
flushout	output.c	/^flushout(dest)$/
fmtstr	output.c	/^fmtstr(char *outbuf, int length, char *fmt, ...) {/
forkshell	jobs.c	/^forkshell(jp, n, mode)$/
freefunc	nodes.c	/^freefunc(n)$/
freejob	jobs.c	/^freejob(jp)$/
freeparam	options.c	/^freeparam(param)$/
freestdout	output.c	/^freestdout() {$/
getcmdentry	exec.c	/^getcmdentry(name, entry)$/
getcomponent	cd.c	/^getcomponent() {$/
getjob	jobs.c	/^getjob(name)$/
getoptscmd	options.c	/^getoptscmd(argc, argv)$/
getprompt	parser.c	/^getprompt(unused)$/
getpwd	cd.c	/^getpwd() {$/
getsigaction	trap.c	/^getsigaction(signo) $/
goodname	parser.c	/^goodname(name)$/
grabstackblock	memalloc.c	/^grabstackblock(len) $/
growstackblock	memalloc.c	/^growstackblock() {$/
growstackstr	memalloc.c	/^growstackstr() {$/
hashalias	alias.c	/^hashalias(p)$/
hashcd	exec.c	/^hashcd() {$/
hashcmd	exec.c	/^hashcmd(argc, argv)$/
hashvar	var.c	/^hashvar(p)$/
histcmd	histedit.c	/^histcmd(argc, argv)$/
histedit	histedit.c	/^histedit() $/
ifsbreakup	expand.c	/^ifsbreakup(string, arglist)$/
ignoresig	trap.c	/^ignoresig(signo) $/
indent	show.c	/^indent(amount, pfx, fp)$/
initvar	var.c	/^initvar() {$/
is_number	mystring.c	/^is_number(p)$/
jobidcmd	jobs.c	/^jobidcmd(argc, argv)  $/
jobscmd	jobs.c	/^jobscmd(argc, argv)$/
list	parser.c	/^list(nlflag) $/
listsetvar	var.c	/^listsetvar(list)$/
localcmd	var.c	/^localcmd(argc, argv)$/
lookupalias	alias.c	/^lookupalias(name, check)$/
lookupvar	var.c	/^lookupvar(name)$/
makejob	jobs.c	/^makejob(node, nprocs)$/
makename	parser.c	/^makename() {$/
makestrspace	memalloc.c	/^makestrspace() {$/
minus_o	options.c	/^minus_o(name, val)$/
mklocal	var.c	/^mklocal(name)$/
msort	expand.c	/^msort(list, len)$/
nextopt	options.c	/^nextopt(optstring)$/
nodesavestr	nodes.c	/^nodesavestr(s)$/
noexpand	parser.c	/^noexpand(text)$/
not_fcnumber	histedit.c	/^not_fcnumber(s)$/
number	mystring.c	/^number(s)$/
onint	error.c	/^onint() {$/
onsig	trap.c	/^onsig(signo) $/
onsigchild	jobs.c	/^STATIC int onsigchild() {$/
open_mem	output.c	/^open_mem(block, length, file)$/
openhere	redir.c	/^openhere(redir)$/
openredirect	redir.c	/^openredirect(redir, memory)$/
opentrace	show.c	/^opentrace() {$/
options	options.c	/^options(cmdline) $/
optschanged	options.c	/^optschanged()$/
out1fmt	output.c	/^out1fmt(char *fmt, ...) {$/
out1str	output.c	/^out1str(p)$/
out2str	output.c	/^out2str(p)$/
outfmt	output.c	/^outfmt(struct output *file, char *fmt, ...) {$/
outstr	output.c	/^outstr(p, file)$/
padvance	exec.c	/^padvance(path, name)$/
parsecmd	parser.c	/^parsecmd(interact) $/
parsefname	parser.c	/^parsefname() {$/
parseheredoc	parser.c	/^parseheredoc() {$/
patmatch	expand.c	/^patmatch(pattern, string)$/
peektoken	parser.c	/^peektoken() {$/
pfgets	input.c	/^pfgets(line, len)$/
pgetc	input.c	/^pgetc() {$/
pipeline	parser.c	/^pipeline() {$/
pmatch	expand.c	/^pmatch(pattern, string)$/
popallfiles	input.c	/^popallfiles() {$/
popfile	input.c	/^popfile() {$/
poplocalvars	var.c	/^poplocalvars() {$/
popredir	redir.c	/^popredir() {$/
popstackmark	memalloc.c	/^popstackmark(mark)$/
popstring	input.c	/^popstring()$/
preadbuffer	input.c	/^preadbuffer() {$/
prefix	mystring.c	/^prefix(pfx, string)$/
prehash	eval.c	/^prehash(n)$/
printentry	exec.c	/^printentry(cmdp, verbose)$/
procargs	options.c	/^procargs(argc, argv)$/
pungetc	input.c	/^pungetc() {$/
pushfile	input.c	/^pushfile() {$/
pushstring	input.c	/^pushstring(s, len, ap)$/
pwdcmd	cd.c	/^pwdcmd(argc, argv)$/
read_profile	main.c	/^read_profile(name)$/
readcmd	miscbltin.c	/^readcmd(argc, argv)$/
readcmdfile	main.c	/^readcmdfile(name)$/
readtoken	parser.c	/^readtoken() {$/
readtoken1	parser.c	/^readtoken1(firstc, syntax, eofmark, striptabs)$/
recordregion	expand.c	/^recordregion(start, end, nulonly) $/
redirect	redir.c	/^redirect(redir, flags)$/
restartjob	jobs.c	/^restartjob(jp)$/
returncmd	eval.c	/^returncmd(argc, argv) $/
rmaliases	alias.c	/^rmaliases() {$/
rmescapes	expand.c	/^rmescapes(str)$/
savestr	memalloc.c	/^savestr(s)$/
scopyn	mystring.c	/^scopyn(from, to, size)$/
setalias	alias.c	/^setalias(name, val)$/
setcmd	options.c	/^setcmd(argc, argv)$/
sethistsize	histedit.c	/^sethistsize()$/
setinputfd	input.c	/^setinputfd(fd, push)$/
setinputfile	input.c	/^setinputfile(fname, push)$/
setinputstring	input.c	/^setinputstring(string, push)$/
setinteractive	trap.c	/^setinteractive(on)$/
setjobctl	jobs.c	/^setjobctl(on) $/
setoption	options.c	/^setoption(flag, val)$/
setparam	options.c	/^setparam(argv)$/
setprompt	parser.c	/^setprompt(which)$/
setsignal	trap.c	/^setsignal(signo) $/
setstackmark	memalloc.c	/^setstackmark(mark)$/
setvar	var.c	/^setvar(name, val, flags)$/
setvarcmd	var.c	/^setvarcmd(argc, argv)$/
setvareq	var.c	/^setvareq(s, flags)$/
sharg	show.c	/^sharg(arg, fp)$/
shcmd	show.c	/^shcmd(cmd, fp)$/
shellexec	exec.c	/^shellexec(argv, envp, path, index)$/
shiftcmd	options.c	/^shiftcmd(argc, argv)$/
showjobs	jobs.c	/^showjobs(change) $/
showtree	show.c	/^showtree(n)$/
showvarscmd	var.c	/^showvarscmd(argc, argv)$/
shprocvar	var.c	/^shprocvar() {$/
shtree	show.c	/^shtree(n, ind, pfx, fp)$/
simplecmd	parser.c	/^simplecmd(rpp, redir) $/
sizenodelist	nodes.c	/^sizenodelist(lp)$/
stalloc	memalloc.c	/^stalloc(nbytes) $/
stoppedjobs	jobs.c	/^stoppedjobs()$/
str_to_event	histedit.c	/^str_to_event(str, last)$/
stunalloc	memalloc.c	/^stunalloc(p)$/
subevalvar	expand.c	/^subevalvar(p, str, subtype, startloc, varflags)$/
synerror	parser.c	/^synerror(msg)$/
synexpect	parser.c	/^synexpect(token) $/
trace	show.c	/^trace(va_alist)$/
trapcmd	trap.c	/^trapcmd(argc, argv)$/
trargs	show.c	/^trargs(ap)$/
trputc	show.c	/^trputc(c) $/
trputs	show.c	/^trputs(s)$/
trstring	show.c	/^trstring(s)$/
truecmd	eval.c	/^truecmd(argc, argv)  $/
tryexec	exec.c	/^tryexec(cmd, argv, envp)$/
ulimitcmd	miscbltin.c	/^ulimitcmd(argc, argv)$/
umaskcmd	miscbltin.c	/^umaskcmd(argc, argv)$/
unalias	alias.c	/^unalias(name)$/
unaliascmd	alias.c	/^unaliascmd(argc, argv)$/
ungrabstackstr	memalloc.c	/^ungrabstackstr(s, p)$/
unsetcmd	var.c	/^unsetcmd(argc, argv)$/
unsetfunc	exec.c	/^unsetfunc(name)$/
unsetvar	var.c	/^unsetvar(s)$/
updatepwd	cd.c	/^updatepwd(dir)$/
varequal	var.c	/^varequal(p, q)$/
varisset	expand.c	/^varisset(name)$/
varvalue	expand.c	/^varvalue(name, quoted, allow_split)$/
waitcmd	jobs.c	/^waitcmd(argc, argv) $/
waitforjob	jobs.c	/^waitforjob(jp)$/
waitproc	jobs.c	/^waitproc(block, status)$/
xioctl	output.c	/^xioctl(fd, request, arg) $/
xwrite	output.c	/^xwrite(fd, buf, nbytes)$/
xxreadtoken	parser.c	/^xxreadtoken() {$/
